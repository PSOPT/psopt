name: Build‑and‑test

permissions:
  contents: read      # already default, but keep explicit
  packages: read      # ✔ allows pulling private GHCR images


# ────────── TRIGGERS ──────────────────────────────────────────────
on:
  push:
    branches: [master]           # run on pushes to master
  pull_request:
    branches: [master]           # run on PRs targeting master
  workflow_dispatch:             # manual “Run workflow” button
  schedule:                      # nightly 02:30 UTC
    - cron: '30 2 * * *'
# ──────────────────────────────────────────────────────────────────

jobs:
  build:
    runs-on: ubuntu-latest       # GitHub‑hosted runner
    # Use your pre‑built Manjaro/Arch container so pacman/yay are available
    container:
      image: ghcr.io/psopt/psopt-ci:latest    # <- change if necessary

    strategy:
      matrix:
        build_type: [Release]    # add Debug if desired

    env:
      EXAMPLES:  "twoburn,low_thrust,zpm,shuttle_reentry,launch,manutec,notorious"
      REF_COSTS: "-2.367249e-01,-2.203380e-01,6.680110e+06,-3.414119e+01,-7.529661e+03,2.040420e+01,8.806615e-01"

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: |
          cmake -B build \
          -DBUILD_EXAMPLES=ON \
          -DHEADLESS=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON \
          -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON

      - name: Build
        run: cmake --build build -j$(nproc)
        
      - name: Install python inside CI container
        run: pacman -Sy --noconfirm python
        
      - name: Debug one executable
        run: |
         file build/examples/twoburn/twoburn
         ldd  build/examples/twoburn/twoburn || true        

      - name: Run selected examples & parse results
        env:
         LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib   # ← add this
        run: |
         python .github/scripts/run_examples.py \
         --exe-dir build/examples \
         --summary build/test_summary.json

      - name: Upload solution files & summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: psopt-logs
          path: |
            build/examples/**/psopt_solution_*.txt
            build/test_summary.json
  publish:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-latest

    steps:
    # ① ─ download the artefact produced by the build job
    - uses: actions/download-artifact@v4
      with:
        name: psopt-logs
        path: tmp_summary           # contains build/test_summary.json

    # ②‑a ─ (optional) build / refresh index.html for a human‑readable table
    - name: Build dashboard
      run: |
        python - <<'PY'
        import json, pathlib, textwrap
        js = json.load(open('tmp_summary/build/test_summary.json'))
        rows = '\n'.join(
            f"{k:<20} │ {'✅' if v['passed'] else '❌'} │ cost = {v['cost']}"
            for k,v in js.items())
        html = textwrap.dedent(f"""
          <!DOCTYPE html><meta charset='utf-8'>
          <h2>Latest PSOPT Example Results</h2>
          <pre>{rows}</pre>
          """)
        pathlib.Path('tmp_summary/index.html').write_text(html)
        PY
- name: Build badge JSON
  run: |
    python - <<'PY'
    import json, pathlib, sys

    # search for test_summary.json inside tmp_summary/
    summary_files = list(pathlib.Path('tmp_summary').rglob('test_summary.json'))
    if not summary_files:
        print("::error ::test_summary.json not found in downloaded artifact")
        sys.exit(1)

    summary_path = summary_files[0]          # take the first match
    data = json.load(open(summary_path, 'r'))

    total  = len(data)
    passed = sum(1 for v in data.values() if v.get("passed"))
    badge  = {
        "schemaVersion": 1,
        "label": "examples",
        "message": f"{passed}/{total} pass",
        "color": "green" if passed == total else "red"
    }

    out = pathlib.Path('tmp_summary/examples_badge.json')
    out.write_text(json.dumps(badge))
    print(f"Wrote badge JSON to {out}")
    PY

    # ③ ─ check out (or create) the gh‑pages branch
    - uses: actions/checkout@v4
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # ④ ─ copy artefacts & commit if they changed
    - name: Copy & commit artefacts
      run: |
        mkdir -p artifacts
        cp tmp_summary/build/test_summary.json artifacts/
        cp tmp_summary/index.html             artifacts/  || true
        cp tmp_summary/examples_badge.json    artifacts/
        if git diff --quiet artifacts/ ; then
          echo "No changes to commit."
        else
          git add artifacts/*
          git commit -m "chore: update dashboard and badge [skip ci]"
          git push origin gh-pages
        fi

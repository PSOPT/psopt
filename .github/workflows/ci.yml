name: Build‑and‑test

permissions:
  contents: read      # already default, but keep explicit
  packages: read      # ✔ allows pulling private GHCR images


# ────────── TRIGGERS ──────────────────────────────────────────────
on:
  push:
    branches: [master]           # run on pushes to master
    paths-ignore:
      - 'README.md'    
  pull_request:
    branches: [master]           # run on PRs targeting master
    paths-ignore:
      - 'README.md'   
  workflow_dispatch:             # manual “Run workflow” button
  schedule:                      # nightly 02:30 UTC
    - cron: '30 2 * * *'
# ──────────────────────────────────────────────────────────────────

jobs:
  build:
    runs-on: ubuntu-latest       # GitHub‑hosted runner
    # Use your pre‑built Manjaro/Arch container so pacman/yay are available
    container:
      image: ghcr.io/psopt/psopt-ci:latest    # <- change if necessary

    strategy:
      matrix:
        build_type: [Release]    # add Debug if desired

    env:
      EXAMPLES:  "twoburn,low_thrust,zpm,shuttle_reentry,launch,manutec,notorious"
      REF_COSTS: "-2.367249e-01,-2.203380e-01,6.680110e+06,-3.414119e+01,-7.529661e+03,2.040420e+01,8.806615e-01"

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: |
          cmake -B build \
          -DBUILD_EXAMPLES=ON \
          -DHEADLESS=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON \
          -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON

      - name: Build
        run: cmake --build build -j$(nproc)
        
      - name: Install python inside CI container
        run: pacman -Sy --noconfirm python
        
      - name: Debug one executable
        run: |
         file build/examples/twoburn/twoburn
         ldd  build/examples/twoburn/twoburn || true        

      - name: Run selected examples & parse results
        env:
         LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib   # ← add this
        run: |
         python .github/scripts/run_examples.py \
         --exe-dir build/examples \
         --summary build/test_summary.json

      - name: Upload solution files & summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: psopt-logs
          path: |
            build/examples/**/psopt_solution_*.txt
            build/test_summary.json
      - name: Print Docker image tag being used
        run: echo "Image tag: ghcr.io/psopt/psopt-ci:latest"
  publish:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: read

    steps:
      # 1) Check out gh-pages and persist GITHUB_TOKEN so we can push
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      # 2) Download the test_summary.json artefact
      - name: Download summary
        uses: actions/download-artifact@v4
        with:
          name: psopt-logs
          path: tmp_summary

      # 3) Copy test_summary.json into artifacts/
      - name: Copy test_summary.json
        run: |
          mkdir -p artifacts
          SUMMARY=$(find tmp_summary -type f -name 'test_summary.json' | head -n1)
          if [ -z "$SUMMARY" ]; then
            echo "::error ::test_summary.json not found"
            exit 1
          fi
          cp "$SUMMARY" artifacts/test_summary.json

      - name: Build Markdown report
        run: |
          python3 - <<'PY'
          import json, pathlib
          data = json.load(open('artifacts/test_summary.json'))
          lines = ["# PSOPT CI Examples Test Summary", "", "| Example | Passed | Cost | Time (s) |", "|---|---|---|---|"]
          for name, info in data.items():
              lines.append(f"| {name} | {'✅' if info['passed'] else '❌'} | {info['cost']} | {info['elapsed_s']:.2f} |")
          pathlib.Path('artifacts/README.md').write_text("\n".join(lines))
          print("👉 Generated artifacts/README.md")
          PY
      # 4) Generate examples_badge.json from test_summary.json
      - name: Build badge JSON
        run: |
          python3 - <<'PY'
          import json, pathlib
          data = json.load(open('artifacts/test_summary.json'))
          total  = len(data)
          passed = sum(1 for v in data.values() if v.get("passed"))
          badge  = {
            "schemaVersion": 1,
            "label": "Selected examples",
            "message": f"{passed}/{total} passed",
            "color": "green" if passed == total else "red"
          }
          pathlib.Path('artifacts/examples_badge.json').write_text(json.dumps(badge))
          PY

      # 5) Copy your index.html if you have one
      - name: Copy dashboard HTML
        run: |
          if [ -f tmp_summary/index.html ]; then
            cp tmp_summary/index.html artifacts/index.html
          fi

      # 6) Commit & push any changes
      - name: Commit & push artifacts
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add artifacts/*
          git commit -m "chore: update test artifacts [skip ci]" || echo "No changes to commit."
          git push origin gh-pages || echo "Nothing to push."

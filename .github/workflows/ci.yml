name: Build‑and‑test

permissions:
  contents: read      # already default, but keep explicit
  packages: read      # ✔ allows pulling private GHCR images


# ────────── TRIGGERS ──────────────────────────────────────────────
on:
  push:
    branches: [master]           # run on pushes to master
  pull_request:
    branches: [master]           # run on PRs targeting master
  workflow_dispatch:             # manual “Run workflow” button
  schedule:                      # nightly 02:30 UTC
    - cron: '30 2 * * *'
# ──────────────────────────────────────────────────────────────────

jobs:
  build:
    runs-on: ubuntu-latest       # GitHub‑hosted runner
    # Use your pre‑built Manjaro/Arch container so pacman/yay are available
    container:
      image: ghcr.io/psopt/psopt-ci:latest    # <- change if necessary

    strategy:
      matrix:
        build_type: [Release]    # add Debug if desired

    env:
      EXAMPLES:  "twoburn,low_thrust,zpm,shuttle_reentry,launch,manutec,notorious"
      REF_COSTS: "-2.367249e-01,-2.203380e-01,6.680110e+06,-3.414119e+01,-7.529661e+03,2.040420e+01,8.806615e-01"

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: |
          cmake -B build \
          -DBUILD_EXAMPLES=ON \
          -DHEADLESS=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON \
          -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON

      - name: Build
        run: cmake --build build -j$(nproc)
        
      - name: Install python inside CI container
        run: pacman -Sy --noconfirm python
        
      - name: Debug one executable
        run: |
         file build/examples/twoburn/twoburn
         ldd  build/examples/twoburn/twoburn || true        

      - name: Run selected examples & parse results
        env:
         LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib   # ← add this
        run: |
         python .github/scripts/run_examples.py \
         --exe-dir build/examples \
         --summary build/test_summary.json

      - name: Upload solution files & summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: psopt-logs
          path: |
            build/examples/**/psopt_solution_*.txt
            build/test_summary.json
  publish:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # ① Download the artifact from the build job into tmp_summary/
      - uses: actions/download-artifact@v4
        with:
          name: psopt-logs
          path: tmp_summary

      # ② Save the summary, dashboard & badge into an “upload” folder
      - name: Stage files for gh-pages
        run: |
          mkdir -p upload
          # find and copy test_summary.json
          SUMMARY=$(find tmp_summary -type f -name 'test_summary.json' | head -n1)
          if [ -z "$SUMMARY" ]; then
            echo "::error ::test_summary.json not found under tmp_summary/"
            exit 1
          fi
          cp "$SUMMARY" upload/test_summary.json
          # copy index.html (if it exists)
          cp tmp_summary/index.html upload/ 2>/dev/null || true
          # copy the badge JSON
          cp tmp_summary/examples_badge.json upload/ || exit 1

      # ③ Checkout or create the gh-pages branch (this will delete tmp_summary/)
      - name: Checkout (create if missing)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git init .
          git remote add origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git fetch origin gh-pages || true
          if git show-ref --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
            git reset --hard origin/gh-pages
          else
            git checkout --orphan gh-pages
            rm -rf *
          fi

      # ④ Copy the staged files into artifacts/ and commit
      - name: Copy & commit artefacts
        run: |
          mkdir -p artifacts
          cp upload/* artifacts/
          # set commit identity
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          # commit if changed
          if git diff --quiet artifacts/; then
            echo "No changes to commit."
          else
            git add artifacts/*
            git commit -m "chore: update dashboard and badge [skip ci]"
            git push origin gh-pages
          fi
